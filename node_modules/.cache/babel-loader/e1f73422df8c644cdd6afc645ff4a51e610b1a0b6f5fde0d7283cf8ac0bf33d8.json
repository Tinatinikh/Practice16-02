{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Robert\\\\Desktop\\\\forms-main\\\\src\\\\Registraion.js\",\n  _s = $RefreshSig$();\nimport { useFormik } from 'formik';\nimport apiRequests from \"./apiRequests.js\";\n\n// დიდ ფორმასთან  მუშაობის და სექმნის სწორი გზა : \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupForm = () => {\n  _s();\n  // ჰუკი იღებს ორ არგუმენტს : პირველი აუცილებლად უნდა იყოს ინიცირებული ანუ საწყისი მნიშვნელობა თითოეული ველისთვის\n  //როგორი ვიზუალით დაგხვდებათ ინფუთები ამაზეა დამოკიდებული (შევსებული ან ცარიელი)\n  const formik = useFormik({\n    initialValues: {\n      // firstName: 'ტესტ', მაგალითად მსგავსი ჩანაწერი სახელის ველში გამოაჩენს სიტყვა \"ტესტს\"\n      firstName: '',\n      lastName: '',\n      picture: '',\n      about: '',\n      email: '',\n      mobile: ''\n    },\n    // მეორე არგუმენტი უნდა იყოს ქმედება, თუ რა მოხდება ფორმის დასაბმითების/ გადაზავნის დროს. გაითვალისიწნეთ ომ უნდა დაწეროთ რიქვესთი\n    //მხოლოდ იმ apiსთვის რომელსაც აქვს რეგისტრაციის სერვისი. ნებისმიერი api ვერ მიიღებს ამ ლოგიკას.\n    onSubmit: values => {\n      //ფორმის დასაბმითება მომხმარებელს უჩვენებს ალერტს შევსებული მონაცემებით\n      // alert(JSON.stringify(values, null, 2));\n\n      //ან გაგზავნის სერვერზე ( შეამოწმეთ apiRequests.js ფაილი)\n      apiRequests('POST', \"register\", values);\n    }\n  });\n  return (\n    /*#__PURE__*/\n    //handleSubmit ჩაშენებული ფუნქციაა რომელიც შეკრებს გადაცემულ მონაცემებს. შეგიძლიათ ასწავლოთ რაიმე ასინქრონული ფუნქციაც\n    _jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"firstName\",\n        children: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"firstName\",\n        name: \"firstName\",\n        type: \"text\"\n        //ცვლილების დროს არ არის საჭირო თითოეული ველის დაკონკრეტება\n        ,\n        onChange: formik.handleChange\n        // თუმცა მნიშვნელობის გადაცემისას აუცილებელია დავაზუსტოთ თუ რომელი ველის შევსებული მნიშვემლობა გვაინტერესებს ( მაგ firstname)\n        ,\n        value: formik.values.firstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"lastName\",\n        children: \"Last Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"lastName\",\n        name: \"lastName\",\n        type: \"text\",\n        onChange: formik.handleChange,\n        value: formik.values.lastName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\u10DE\\u10D8\\u10E0\\u10D0\\u10D3\\u10D8 \\u10E4\\u10DD\\u10E2\\u10DD\\u10E1 \\u10D0\\u10E2\\u10D5\\u10D8\\u10E0\\u10D7\\u10D5\\u10D0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"upload\",\n        onChange: formik.handleChange,\n        value: formik.values.picture,\n        children: \" \\u10D0\\u10E2\\u10D5\\u10D8\\u10E0\\u10D7\\u10D5\\u10D0 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" \\u10E9\\u10D4\\u10DB \\u10E8\\u10D4\\u10E1\\u10D0\\u10EE\\u10D4\\u10D1 (\\u10D0\\u10E0\\u10D0\\u10E1\\u10D0\\u10D5\\u10D0\\u10DA\\u10D3\\u10D4\\u10D1\\u10E3\\u10DA\\u10DD)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"about\",\n        name: \"about\",\n        type: \"about\",\n        onChange: formik.handleChange,\n        value: formik.values.about\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        name: \"email\",\n        type: \"email\",\n        onChange: formik.handleChange,\n        value: formik.values.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(SignupForm, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n_c = SignupForm;\nexport default SignupForm;\n\n// არასწორია ბევრი ინფუთი დავწეროთ ისე როგორც ვწერდით ძებნის ლოგიკას ან პრპდუქტის დამატებას : \n// 1. მოგიწევთ მნიშვნელობების დასეტვა ძალიან ბევრჯერ, რაც იწვევს გადატვირთვას და კოდს ზრდის მოცულობაში\n// const [value, setValue] = useState('')\n// const [value, setValue] = useState('')\n// const [value, setValue] = useState('')\n\n//2. მოგიწევთ სერვერზე ამ ინფორმაციის ცალცალკე გაგზავნა ბევრი ფუნქციით, ან შეგროვება , რაც რა თქმა უნდა კიდევ უფრო ანელებს პროცესს\n// function addName(e){\n//     e.preventDefault();\n//     const newItems = [\n//         ...items,\n//         {\n//             title: value,\n\n//         },\n//     ]\n//     setItem(newItem)\n//     setValue(\"\")\n// }\n\n// function addEmail(e){\n//     e.preventDefault();\n//     const newItems = [\n//         ...items,\n//         {\n//             title: value,\n\n//         },\n//     ]\n//     setItem(newItem)\n//     setValue(\"\")\n// }\n\n//3. განხვავება არ არის მხოლოდ ინფუთების შექმნის გზაში. აქაც მოგიწევთ იმდეი ინფუთის დაწერა რამდენიც საჭიროა \n//პროცესისთვის. მაგრამ ეს რენდერს არ დააყვირთავს, მხოლოდ ფუნქციონი კუთხით ნელნელა შეგროვდება შევსებული მონაცემები\n\n// <form action =\"\" onSubmit={addName}>\n// <input \n// type=\"text\" \n// value={value} \n// onChange={e => setValue(e.target.value)}\n// ref ={inputRef}\n// />\n// </form>\n\n// <form action =\"\" onSubmit={addEmail}>\n// <input \n// type=\"text\" \n// value={value} \n// onChange={e => setValue(e.target.value)}\n// ref ={inputRef}\n// />\n// </form>\nvar _c;\n$RefreshReg$(_c, \"SignupForm\");","map":{"version":3,"names":["useFormik","apiRequests","SignupForm","formik","initialValues","firstName","lastName","picture","about","email","mobile","onSubmit","values","handleSubmit","handleChange"],"sources":["C:/Users/Robert/Desktop/forms-main/src/Registraion.js"],"sourcesContent":["import { useFormik } from 'formik';\r\nimport  apiRequests from \"./apiRequests.js\"\r\n\r\n\r\n// დიდ ფორმასთან  მუშაობის და სექმნის სწორი გზა : \r\n\r\nconst SignupForm = () => {\r\n// ჰუკი იღებს ორ არგუმენტს : პირველი აუცილებლად უნდა იყოს ინიცირებული ანუ საწყისი მნიშვნელობა თითოეული ველისთვის\r\n//როგორი ვიზუალით დაგხვდებათ ინფუთები ამაზეა დამოკიდებული (შევსებული ან ცარიელი)\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        // firstName: 'ტესტ', მაგალითად მსგავსი ჩანაწერი სახელის ველში გამოაჩენს სიტყვა \"ტესტს\"\r\n      firstName: '',\r\n      lastName: '',\r\n      picture:'',\r\n      about:'',\r\n      email: '',\r\n      mobile:'',\r\n\r\n    },\r\n// მეორე არგუმენტი უნდა იყოს ქმედება, თუ რა მოხდება ფორმის დასაბმითების/ გადაზავნის დროს. გაითვალისიწნეთ ომ უნდა დაწეროთ რიქვესთი\r\n//მხოლოდ იმ apiსთვის რომელსაც აქვს რეგისტრაციის სერვისი. ნებისმიერი api ვერ მიიღებს ამ ლოგიკას.\r\n    onSubmit: values => {\r\n//ფორმის დასაბმითება მომხმარებელს უჩვენებს ალერტს შევსებული მონაცემებით\r\n      // alert(JSON.stringify(values, null, 2));\r\n\r\n      //ან გაგზავნის სერვერზე ( შეამოწმეთ apiRequests.js ფაილი)\r\n       apiRequests('POST', \"register\", values)\r\n\r\n    },\r\n  });\r\n  return (\r\n//handleSubmit ჩაშენებული ფუნქციაა რომელიც შეკრებს გადაცემულ მონაცემებს. შეგიძლიათ ასწავლოთ რაიმე ასინქრონული ფუნქციაც\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <label htmlFor=\"firstName\">First Name</label>\r\n      <input\r\n        id=\"firstName\"\r\n        name=\"firstName\"\r\n        type=\"text\"\r\n    //ცვლილების დროს არ არის საჭირო თითოეული ველის დაკონკრეტება\r\n        onChange={formik.handleChange}\r\n    // თუმცა მნიშვნელობის გადაცემისას აუცილებელია დავაზუსტოთ თუ რომელი ველის შევსებული მნიშვემლობა გვაინტერესებს ( მაგ firstname)\r\n        value={formik.values.firstName}\r\n      />\r\n      <label htmlFor=\"lastName\">Last Name</label>\r\n      <input\r\n        id=\"lastName\"\r\n        name=\"lastName\"\r\n        type=\"text\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.lastName}\r\n      />\r\n      <span>პირადი ფოტოს ატვირთვა</span>\r\n      <button type=\"upload\" onChange={formik.handleChange}\r\n       value={formik.values.picture} > ატვირთვა </button>\r\n\r\n      <label> ჩემ შესახებ (არასავალდებულო)</label>\r\n      <input\r\n        id=\"about\"\r\n        name=\"about\"\r\n        type=\"about\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.about}\r\n      />\r\n      \r\n      <label htmlFor=\"email\">Email Address</label>\r\n      <input\r\n        id=\"email\"\r\n        name=\"email\"\r\n        type=\"email\"\r\n        onChange={formik.handleChange}\r\n        value={formik.values.email}\r\n      />\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n\r\n\r\n\r\n// არასწორია ბევრი ინფუთი დავწეროთ ისე როგორც ვწერდით ძებნის ლოგიკას ან პრპდუქტის დამატებას : \r\n// 1. მოგიწევთ მნიშვნელობების დასეტვა ძალიან ბევრჯერ, რაც იწვევს გადატვირთვას და კოდს ზრდის მოცულობაში\r\n// const [value, setValue] = useState('')\r\n// const [value, setValue] = useState('')\r\n// const [value, setValue] = useState('')\r\n\r\n//2. მოგიწევთ სერვერზე ამ ინფორმაციის ცალცალკე გაგზავნა ბევრი ფუნქციით, ან შეგროვება , რაც რა თქმა უნდა კიდევ უფრო ანელებს პროცესს\r\n// function addName(e){\r\n//     e.preventDefault();\r\n//     const newItems = [\r\n//         ...items,\r\n//         {\r\n//             title: value,\r\n\r\n//         },\r\n//     ]\r\n//     setItem(newItem)\r\n//     setValue(\"\")\r\n// }\r\n\r\n// function addEmail(e){\r\n//     e.preventDefault();\r\n//     const newItems = [\r\n//         ...items,\r\n//         {\r\n//             title: value,\r\n\r\n//         },\r\n//     ]\r\n//     setItem(newItem)\r\n//     setValue(\"\")\r\n// }\r\n\r\n\r\n//3. განხვავება არ არის მხოლოდ ინფუთების შექმნის გზაში. აქაც მოგიწევთ იმდეი ინფუთის დაწერა რამდენიც საჭიროა \r\n//პროცესისთვის. მაგრამ ეს რენდერს არ დააყვირთავს, მხოლოდ ფუნქციონი კუთხით ნელნელა შეგროვდება შევსებული მონაცემები\r\n\r\n// <form action =\"\" onSubmit={addName}>\r\n// <input \r\n// type=\"text\" \r\n// value={value} \r\n// onChange={e => setValue(e.target.value)}\r\n// ref ={inputRef}\r\n// />\r\n// </form>\r\n\r\n// <form action =\"\" onSubmit={addEmail}>\r\n// <input \r\n// type=\"text\" \r\n// value={value} \r\n// onChange={e => setValue(e.target.value)}\r\n// ref ={inputRef}\r\n// />\r\n// </form>"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,QAAQ;AAClC,OAAQC,WAAW,MAAM,kBAAkB;;AAG3C;AAAA;AAEA,MAAMC,UAAU,GAAG,MAAM;EAAA;EACzB;EACA;EACE,MAAMC,MAAM,GAAGH,SAAS,CAAC;IACvBI,aAAa,EAAE;MACX;MACFC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAC,EAAE;MACVC,KAAK,EAAC,EAAE;MACRC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAC;IAET,CAAC;IACL;IACA;IACIC,QAAQ,EAAEC,MAAM,IAAI;MACxB;MACM;;MAEA;MACCX,WAAW,CAAC,MAAM,EAAE,UAAU,EAAEW,MAAM,CAAC;IAE1C;EACF,CAAC,CAAC;EACF;IAAA;IACF;IACI;MAAM,QAAQ,EAAET,MAAM,CAACU,YAAa;MAAA,wBAClC;QAAO,OAAO,EAAC,WAAW;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eAC7C;QACE,EAAE,EAAC,WAAW;QACd,IAAI,EAAC,WAAW;QAChB,IAAI,EAAC;QACT;QAAA;QACI,QAAQ,EAAEV,MAAM,CAACW;QACrB;QAAA;QACI,KAAK,EAAEX,MAAM,CAACS,MAAM,CAACP;MAAU;QAAA;QAAA;QAAA;MAAA,QAC/B,eACF;QAAO,OAAO,EAAC,UAAU;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkB,eAC3C;QACE,EAAE,EAAC,UAAU;QACb,IAAI,EAAC,UAAU;QACf,IAAI,EAAC,MAAM;QACX,QAAQ,EAAEF,MAAM,CAACW,YAAa;QAC9B,KAAK,EAAEX,MAAM,CAACS,MAAM,CAACN;MAAS;QAAA;QAAA;QAAA;MAAA,QAC9B,eACF;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAkC,eAClC;QAAQ,IAAI,EAAC,QAAQ;QAAC,QAAQ,EAAEH,MAAM,CAACW,YAAa;QACnD,KAAK,EAAEX,MAAM,CAACS,MAAM,CAACL,OAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAqB,eAEnD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA4C,eAC5C;QACE,EAAE,EAAC,OAAO;QACV,IAAI,EAAC,OAAO;QACZ,IAAI,EAAC,OAAO;QACZ,QAAQ,EAAEJ,MAAM,CAACW,YAAa;QAC9B,KAAK,EAAEX,MAAM,CAACS,MAAM,CAACJ;MAAM;QAAA;QAAA;QAAA;MAAA,QAC3B,eAEF;QAAO,OAAO,EAAC,OAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAsB,eAC5C;QACE,EAAE,EAAC,OAAO;QACV,IAAI,EAAC,OAAO;QACZ,IAAI,EAAC,OAAO;QACZ,QAAQ,EAAEL,MAAM,CAACW,YAAa;QAC9B,KAAK,EAAEX,MAAM,CAACS,MAAM,CAACH;MAAM;QAAA;QAAA;QAAA;MAAA,QAC3B,eACF;QAAQ,IAAI,EAAC,QAAQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA;EAChC;AAEX,CAAC;AAAC,GAtEIP,UAAU;EAAA,QAGCF,SAAS;AAAA;AAAA,KAHpBE,UAAU;AAwEhB,eAAeA,UAAU;;AAIzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}